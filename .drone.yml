---
kind: pipeline
name: default

platform:
  os: linux
  arch: amd64

steps:
- name: fmt
  pull: default
  image: patwie/goimports:v1
  commands:
  - "[ 0 -eq `goimports -l . | wc -l` ]"

- name: lint
  image: golangci/golangci-lint:v1.42
  pull: true
  commands:
    - golangci-lint run -D errcheck --timeout=5m

- name: build
  pull: default
  image: golang
  commands:
  - sed -i 's/"YXZ"/"${DRONE_COMMIT_SHA}"/g' symbol/version.go
  - go version
  - go get github.com/markbates/pkger/cmd/pkger
  - pkger
  - go build infomark.go
  environment:
    GOPROXY: https://proxy.golang.org

- name: ping_db
  pull: default
  image: postgres:11.2-alpine
  commands:
  - "until PGPASSWORD=postgres psql -U postgres -d infomark -h database \\\n -c \"SELECT 1;\" >/dev/null 2>&1; do sleep 1; done\n"
  - "PGPASSWORD=postgres psql -U postgres -d infomark -h database \\\n  -c \"SELECT * FROM pg_catalog.pg_tables;\"\n"

- name: ping_amqp
  pull: default
  image: rabbitmq:3.7.3-management-alpine
  commands:
  - "until wget --spider http://rabbitAMQP:15672 >/dev/null 2>&1; do sleep 1; done"

- name: ping_redis
  pull: default
  image: redis:5.0.4-alpine
  commands:
  - "until redis-cli -h redis_service ping >/dev/null 2>&1; do sleep 1; done"
  - redis-cli -h redis_service  FLUSHALL

- name: mock
  pull: default
  image: python:3
  commands:
  - cd migration/mock
  - pip3 install -r requirements.txt
  - python3 mock.py

- name: migrate
  pull: default
  image: golang
  commands:
  - export INFOMARK_CONFIG_FILE=`realpath .infomark-ci.yml`
  - ./infomark console database migrate

- name: seed
  pull: default
  image: postgres:11.2-alpine
  commands:
  - cd migration/mock
  - "PGPASSWORD=postgres psql -h 'database' -U 'postgres' -d 'infomark' -f mock.sql >/dev/null"

- name: test
  pull: default
  image: golang
  commands:
  - export INFOMARK_CONFIG_FILE=`realpath .infomark-ci.yml`
  - go test ./... -cover -v --goblin.timeout 15s -coverprofile coverage.out
  environment:
    GOPROXY: https://proxy.golang.org

- name: embed_files
  pull: default
  image: golang
  commands:
  - go get github.com/markbates/pkger/cmd/pkger
  - cd /tmp
  - wget -qO-  https://github.com/infomark-org/infomark-ui/releases/latest/download/infomark-ui.tar.gz | tar -xvz
  - cd /drone/src
  - cp -r /tmp/build/* /drone/src/static
  - pkger list
  - pkger
  - ls infomark -larth
  - rm infomark
  - go build
  - ls infomark -larth
  environment:
    GOPROXY: https://proxy.golang.org

- name: docs
  pull: default
  image: golang
  commands:
  - export INFOMARK_CONFIG_FILE=`realpath .infomark-ci.yml`
  - go generate
  environment:
    GOPROXY: https://proxy.golang.org

- name: create_release
  pull: default
  image: patwie/tar
  commands:
    - tar -czvf infomark.tar.gz api.yaml infomark README.md LICENSE files/uploads/ files/generated_files/ files/common/

- name: publish_release
  image: plugins/github-release
  settings:
    api_key:
      from_secret: github_token
    files:
      - infomark.tar.gz
    checksum:
      - md5
      - sha256
  when:
    event: tag

services:
- name: database
  pull: default
  image: postgres:11.2-alpine
  environment:
    POSTGRES_DB: infomark
    POSTGRES_PASSWORD: postgres
    POSTGRES_USER: postgres

- name: rabbitAMQP
  pull: default
  image: rabbitmq:3.7.3-management-alpine
  environment:
    RABBITMQ_DEFAULT_PASS: password
    RABBITMQ_DEFAULT_USER: user

- name: redis_service
  pull: default
  image: redis:5.0.4-alpine



---
kind: signature
hmac: 20882e768233a46451a3c2936966b3ed9efb94fb041bd0ee8509655860539f54

...
